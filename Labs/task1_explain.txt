Я отримала такі результати:
Add_time in order ArrayList, LinkedList, TreeSet, HashSet
18419
68894
106342
6970
add in middle time in order ArrayList, LinkedList
31944
20963
Search_time in order ArrayList, LinkedList, TreeSet, HashSet
222054
228384
19839
5530
Remove_time in order ArrayList, LinkedList, TreeSet, HashSet
10031
17977
9060
10256

Порівнювати буду парами списки і сети, бо вони все-таки призначені для трохи різних речей: сети
не мають індексації і признаені по суті для перевірки чи входить об'єкт в множину, сети не допускають
дублікатів. А от списки дублікати допускають, призначені просто для зберігання інформації.


спочатку ArrayList і LinkedList. Одне - звичний масив, інше - двозв'язний список.
 Відповідно, вставка не в кінець списку - в ArrayList довга операція(якщо масив великий),
 а у LinkedList - довший пошук елемента, як власне і в масива(бо там де нам треба шукати більше
 підходять сети). Видаляє елементи довше в двозв'язному списку.

тепер про сети. хешсет працює з хеш-значеннями, відповідно досить швидкий. але в нього є проблма -
він не сортує, на відміну від трісет. +трісет швидше видаляє.